<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.family.financial.management.dao.mapper.AccountMonthMapper">
  <resultMap id="BaseResultMap" type="com.family.financial.management.dao.entity.AccountMonth">
    <id column="id" jdbcType="TINYINT" property="id" />
    <result column="user_id" jdbcType="BIGINT" property="userId" />
    <result column="month" jdbcType="BIGINT" property="month" />
    <result column="income" jdbcType="BIGINT" property="income" />
    <result column="spend" jdbcType="BIGINT" property="spend" />
    <result column="balance" jdbcType="BIGINT" property="balance" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, user_id, month, income, spend, balance
  </sql>
  <select id="selectByExample" parameterType="com.family.financial.management.dao.entity.AccountMonthExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from account_month
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="limit != null">
      <if test="offset != null">
        limit ${offset}, ${limit}
      </if>
      <if test="offset == null">
        limit ${limit}
      </if>
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Byte" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from account_month
    where id = #{id,jdbcType=TINYINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Byte">
    delete from account_month
    where id = #{id,jdbcType=TINYINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.family.financial.management.dao.entity.AccountMonthExample">
    delete from account_month
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.family.financial.management.dao.entity.AccountMonth">
    insert into account_month (id, user_id, month, 
      income, spend, balance
      )
    values (#{id,jdbcType=TINYINT}, #{userId,jdbcType=BIGINT}, #{month,jdbcType=BIGINT}, 
      #{income,jdbcType=BIGINT}, #{spend,jdbcType=BIGINT}, #{balance,jdbcType=BIGINT}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.family.financial.management.dao.entity.AccountMonth">
    insert into account_month
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="userId != null">
        user_id,
      </if>
      <if test="month != null">
        month,
      </if>
      <if test="income != null">
        income,
      </if>
      <if test="spend != null">
        spend,
      </if>
      <if test="balance != null">
        balance,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=TINYINT},
      </if>
      <if test="userId != null">
        #{userId,jdbcType=BIGINT},
      </if>
      <if test="month != null">
        #{month,jdbcType=BIGINT},
      </if>
      <if test="income != null">
        #{income,jdbcType=BIGINT},
      </if>
      <if test="spend != null">
        #{spend,jdbcType=BIGINT},
      </if>
      <if test="balance != null">
        #{balance,jdbcType=BIGINT},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.family.financial.management.dao.entity.AccountMonthExample" resultType="java.lang.Long">
    select count(*) from account_month
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update account_month
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=TINYINT},
      </if>
      <if test="record.userId != null">
        user_id = #{record.userId,jdbcType=BIGINT},
      </if>
      <if test="record.month != null">
        month = #{record.month,jdbcType=BIGINT},
      </if>
      <if test="record.income != null">
        income = #{record.income,jdbcType=BIGINT},
      </if>
      <if test="record.spend != null">
        spend = #{record.spend,jdbcType=BIGINT},
      </if>
      <if test="record.balance != null">
        balance = #{record.balance,jdbcType=BIGINT},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update account_month
    set id = #{record.id,jdbcType=TINYINT},
      user_id = #{record.userId,jdbcType=BIGINT},
      month = #{record.month,jdbcType=BIGINT},
      income = #{record.income,jdbcType=BIGINT},
      spend = #{record.spend,jdbcType=BIGINT},
      balance = #{record.balance,jdbcType=BIGINT}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.family.financial.management.dao.entity.AccountMonth">
    update account_month
    <set>
      <if test="userId != null">
        user_id = #{userId,jdbcType=BIGINT},
      </if>
      <if test="month != null">
        month = #{month,jdbcType=BIGINT},
      </if>
      <if test="income != null">
        income = #{income,jdbcType=BIGINT},
      </if>
      <if test="spend != null">
        spend = #{spend,jdbcType=BIGINT},
      </if>
      <if test="balance != null">
        balance = #{balance,jdbcType=BIGINT},
      </if>
    </set>
    where id = #{id,jdbcType=TINYINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.family.financial.management.dao.entity.AccountMonth">
    update account_month
    set user_id = #{userId,jdbcType=BIGINT},
      month = #{month,jdbcType=BIGINT},
      income = #{income,jdbcType=BIGINT},
      spend = #{spend,jdbcType=BIGINT},
      balance = #{balance,jdbcType=BIGINT}
    where id = #{id,jdbcType=TINYINT}
  </update>
</mapper>